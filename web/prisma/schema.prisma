// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id               String     @id
  name             String
  email            String
  emailVerified    Boolean
  stripeCustomerId String?
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  Review           Review[]
  UserVote         UserVote[]
  Tool             Tool[]

  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  SearchHistory    SearchHistory[]
  UserToolFavorite UserToolFavorite[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Review {
  id        String    @id @default(uuid())
  toolId    String
  userId    String
  rating    Float
  content   String
  upvotes   Int       @default(0)
  downvotes Int       @default(0)
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz

  Tool                 Tool                   @relation(fields: [toolId], references: [id])
  User                 User                   @relation(fields: [userId], references: [id])
  UserVote             UserVote[]
  CollectionToolReview CollectionToolReview[]

  @@index([toolId])
  @@index([userId])
}

model UserVote {
  userId    String
  reviewId  String
  upvote    Boolean
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz

  User   User   @relation(fields: [userId], references: [id])
  Review Review @relation(fields: [reviewId], references: [id])

  @@id([userId, reviewId])
}

model Tool {
  id               String                       @id @default(uuid())
  slug             String?                      @unique
  name             String
  rating           Float                        @default(0)
  pricing          String                       @default("")
  excerpt          String?
  description      String
  url              String
  image            String
  logoImageUrl     String?
  screenshotUrl    String?
  ownerId          String?
  createdAt        DateTime                     @default(now()) @db.Timestamptz
  updatedAt        DateTime                     @default(now()) @updatedAt @db.Timestamptz
  deletedAt        DateTime?                    @db.Timestamptz
  vector           Unsupported("vector(1536)")?
  User             User?                        @relation(fields: [ownerId], references: [id])
  ToolTags         ToolTags[]
  Review           Review[]
  ToolAnalytics    ToolAnalytics?
  CollectionTool   CollectionTool[]
  UserToolFavorite UserToolFavorite[]

  @@index([name])
  @@index([pricing])
  @@index([description])
  @@index([rating])
  @@index([deletedAt])
}

model ToolTags {
  id        String   @id @default(uuid())
  toolId    String
  tag       String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz

  Tool Tool @relation(fields: [toolId], references: [id])
  Tag  Tag  @relation(fields: [tag], references: [name])

  @@unique([toolId, tag])
}

model Tag {
  name      String     @id
  uses      Int        @default(0)
  createdAt DateTime   @default(now()) @db.Timestamptz
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamptz
  banned    DateTime?
  ToolTags  ToolTags[]
}

model Waitlist {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

model ContactUs {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  email            String
  phone            String
  companyName      String
  reasonForContact String
  message          String
  createdAt        DateTime @default(now()) @db.Timestamptz
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String?
  query     String
  tags      String[]
  pricing   String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz

  User User? @relation(fields: [userId], references: [id])
}

model ToolAnalytics {
  toolId         String   @id
  views          Int      @default(0)
  shareClicks    Int      @default(0)
  tryItNowClicks Int      @default(0)
  favorites      Int      @default(0)
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz

  Tool Tool @relation(fields: [toolId], references: [id])
}

model Collection {
  id                    String                 @id @default(uuid())
  slug                  String?                @unique
  name                  String
  description           String
  image                 String
  createdAt             DateTime               @default(now()) @db.Timestamptz
  updatedAt             DateTime               @default(now()) @updatedAt @db.Timestamptz
  CollectionTools       CollectionTool[]
  CollectionToolReviews CollectionToolReview[]
}

model CollectionTool {
  collectionId String
  toolId       String
  createdAt    DateTime   @default(now()) @db.Timestamptz
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz
  Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Tool         Tool       @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([collectionId, toolId])
}

model CollectionToolReview {
  collectionId String
  reviewId     String
  createdAt    DateTime   @default(now()) @db.Timestamptz
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz
  Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Review       Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([collectionId, reviewId])
}

model UserToolFavorite {
  userId    String
  toolId    String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([userId, toolId])
}
