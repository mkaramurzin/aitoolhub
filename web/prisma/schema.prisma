// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id
  name             String
  email            String
  emailVerified    Boolean
  stripeCustomerId String?
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  Review           Review[]
  UserVote         UserVote[]
  Tool             Tool[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Review {
  id        String   @id @default(uuid())
  toolId    String
  userId    String
  rating    Float
  content   String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Tool     Tool       @relation(fields: [toolId], references: [id])
  User     User       @relation(fields: [userId], references: [id])
  UserVote UserVote[]

  @@index([toolId])
  @@index([userId])
}

model UserVote {
  userId    String
  reviewId  String
  upvote    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  Review Review @relation(fields: [reviewId], references: [id])

  @@id([userId, reviewId])
}

model Tool {
  id          String     @id
  name        String
  rating      Float      @default(0)
  pricing     String     @default("")
  description String
  url         String
  image       String
  ownerId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  User        User?      @relation(fields: [ownerId], references: [id])
  ToolTags    ToolTags[]
  Review      Review[]
}

model ToolTags {
  id        String   @id @default(cuid())
  toolId    String
  tag       String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz

  Tool Tool @relation(fields: [toolId], references: [id])
  Tag  Tag  @relation(fields: [tag], references: [name])

  @@unique([toolId, tag])
}

model Tag {
  name      String     @id
  uses      Int        @default(0)
  createdAt DateTime   @default(now()) @db.Timestamptz
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamptz
  banned    DateTime?
  ToolTags  ToolTags[]
}

model Waitlist {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
